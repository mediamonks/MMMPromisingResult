{"Typealiases.html#/Promising":{"name":"Promising","abstract":"<p>An alias for <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/PromisingResult.html\">PromisingResult</a></code> where <code>Error</code> type is a generic Swift <code>Error</code>."},"Classes/PromisingResultSink.html#/init(queue:dependency:)":{"name":"init(queue:dependency:)","parent_name":"PromisingResultSink"},"Classes/PromisingResultSink.html#/ResultType":{"name":"ResultType","parent_name":"PromisingResultSink"},"Classes/PromisingResultSink.html#/result":{"name":"result","abstract":"<p>The result promised, if available.</p>","parent_name":"PromisingResultSink"},"Classes/PromisingResultSink.html#/push(_:)":{"name":"push(_:)","abstract":"<p>Called once by the owner to pass the result down the completion callback chain.","parent_name":"PromisingResultSink"},"Classes/PromisingResultSink.html#/sourceFrom(_:)":{"name":"sourceFrom(_:)","abstract":"<p>Allows to use the result of another callback chain as the result of this one.","parent_name":"PromisingResultSink"},"Classes/PromisingResultSink.html#/drain":{"name":"drain","abstract":"<p>Returns the part of this object suitable for external users, the ones who are not supposed to fulfill it.</p>","parent_name":"PromisingResultSink"},"Classes/PromisingResult.html#/failure(_:)":{"name":"failure(_:)","abstract":"<p>An instance that is a failure from the start.</p>","parent_name":"PromisingResult"},"Classes/PromisingResult.html#/success(_:)":{"name":"success(_:)","abstract":"<p>An instance that is a success from the start.</p>","parent_name":"PromisingResult"},"Classes/PromisingResult.html#/completion(_:)":{"name":"completion(_:)","abstract":"<p>Sets a closure to call when the result is ready.</p>","parent_name":"PromisingResult"},"Classes/PromisingResult.html#/completion(queue:_:)":{"name":"completion(queue:_:)","abstract":"<p>Sets a closure to call on the given queue when the result is ready.</p>","parent_name":"PromisingResult"},"Classes/PromisingResult.html#/then(queue:_:)":{"name":"then(queue:_:)","abstract":"<p>When the result is ready and is successful, then it&rsquo;s passed to the given closure;","parent_name":"PromisingResult"},"Classes/PromisingResult.html#/transform(_:)":{"name":"transform(_:)","abstract":"<p>Sets a transformation to perform on the result when it&rsquo;s ready.</p>","parent_name":"PromisingResult"},"Classes/PromisingResult.html#/transformSuccess(_:)":{"name":"transformSuccess(_:)","abstract":"<p>Sets a transformation to perform on the result when it&rsquo;s ready and is a success.","parent_name":"PromisingResult"},"Classes/PromisingResult.html#/transformError(_:)":{"name":"transformError(_:)","abstract":"<p>Sets a transformation to perform on the result when it&rsquo;s ready and is a failure.","parent_name":"PromisingResult"},"Classes/PromisingResult.html":{"name":"PromisingResult","abstract":"<p>A promise-like type using <code>Swift.Result</code> as its value. This part is to be seen by the user code,"},"Classes/PromisingResultSink.html":{"name":"PromisingResultSink","abstract":"<p>A promise-like type using <code>Swift.Result</code> as its value. This part is for code owning the initial result,"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Typealiases.html":{"name":"Type Aliases","abstract":"<p>The following type aliases are available globally.</p>"}}